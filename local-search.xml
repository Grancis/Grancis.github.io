<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>web开发-前端基础4-ElementUI</title>
    <link href="/posts/post_web-frontend_primary4/"/>
    <url>/posts/post_web-frontend_primary4/</url>
    
    <content type="html"><![CDATA[<h2 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a>ElementUI</h2><p>ElementUI是一个封装好的UI组件，它为web前端开发者提供一套风格统一、美观的现代化UI组件。在<code>Vue</code>项目中全局引入<code>element-ui</code>后可以像使用原生<code>html</code>标签一样地使用ElementUI的定制标签。</p><p>具体使用方法，参考<a href="https://element.eleme.io/#/zh-CN">ElementUI的官方文档</a>。下文对<code>Vue</code>版本的ElementUI进行简单介绍。</p><h3 id="安装-amp-全局引入"><a href="#安装-amp-全局引入" class="headerlink" title="安装&amp;全局引入"></a>安装&amp;全局引入</h3><p>UI框架是运行时依赖，用<code>-S</code>参数安装：</p><pre><code class="hljs bash">npm install element-ui -S</code></pre><p>将UI框架模块全局引入后，在各个组件中无需再引入就可以直接使用<code>element-ui</code>提供的组件标签等功能。在<code>/src/main.js</code>中我们创建了唯一的<code>Vue</code>实例，全局引入也是在这里进行：</p><pre><code class="hljs JavaScript"><span class="hljs-comment">//main.js</span><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>; <span class="hljs-comment">// 引入模块</span><span class="hljs-comment">//...</span>Vue.config.productionTip = <span class="hljs-literal">false</span>Vue.use(ElementUI); <span class="hljs-comment">//在Vue实例中注册模块</span><span class="hljs-keyword">new</span> Vue(&#123;  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><a href="https://element.eleme.io/#/zh-CN">ElementUI的官方文档</a>对每个组件的使用都描述得很清楚，并且配有可编辑的示例代码。不需要专门学习记忆，使用前过一遍知道它有什么组件，使用到某个组件时再对应查找学习使用即可。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>基础教程</tag>
      
      <tag>elementUI</tag>
      
      <tag>UI框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发-前端基础3-vue.js</title>
    <link href="/posts/post_web-frontend_primary3/"/>
    <url>/posts/post_web-frontend_primary3/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p><code>Vue</code>是一款Web App前端开发框架，它主打“响应式”。“响应式”的意思是当Web App页面中使用的变量发生变化时自动完成页面更新。为了达到自动更新的效果，需要按照<code>Vue</code>框架组件规定的方式去开发页面，大概就是将有可能需要更新的变量定义在<code>Vue</code>框架中，由框架去维护与这些变量相关给页面更新，开发者只需要更新变量即可。</p><p>学习使用<code>Vue</code>最好的方式就是看<a href="https://cn.vuejs.org/index.html">官方文档</a>, 并动手操练。以下文章我的一点小见解，为<code>Vue</code>的初学者提供一个思路。</p><h3 id="脚手架vue-cli"><a href="#脚手架vue-cli" class="headerlink" title="脚手架vue-cli"></a>脚手架vue-cli</h3><p>在<a href="https://cn.vuejs.org/index.html">官方文档</a>的安装介绍中有一个是用<code>&lt;script&gt;</code>标签引入的方法来使用<code>Vue</code>，这里不推荐使用这种方法。推荐直接使用官方的项目构建工具<code>vue-cli</code>来创建前端项目。</p><p>关于脚手架的使用，具体参考<a href="https://cli.vuejs.org/zh/">vue-cli的官方文档</a>。下面对其进行简单的介绍。</p><p><code>vue-cli</code>是一个基于<code>webpack</code>的工具，实现的功能与<code>webpack</code>一致，直接封装了更多与<code>Vue</code>框架相关的插件工具。一般选择全局安装<code>vue-cli</code>。</p><pre><code class="hljs bash"><span class="hljs-comment"># vue-cli 3.x 的安装</span>npm install -g @vue/cli</code></pre><p>目前官方已经开始主推3.x的脚手架，没使用过2.x版本的也推荐直接使用3.x版本。3.x版本对新手更友好，开始陆续推出图形化的配置功能。</p><p>安装好脚手架后只需要一个命令就可以交互式地创建一个<code>Vue</code>项目：</p><pre><code class="hljs bash"><span class="hljs-comment"># 使用vue-cli 3.x 初始化一个Vue项目</span>vue create [project-name]</code></pre><p><img src="/img/post/web-frontend_primary3-1.png"></p><p>最开始会让你选择一个”预设”，<code>default</code>是默认的、适合大多数项目的插件配置，<code>manually select</code>允许你自己去选择插件。对于刚入门<code>Vue</code>或者说刚入门前端高级开发的推荐选择<code>default</code>,后期对各种插件有所了解之后再自己配置。选择<code>default</code>能够让你快速开始一个<code>Vue</code>项目。</p><p>安装完成后进入刚刚创建的目录，<code>npm run serve</code>就能开启调试服务器模式<br><img src="/img/post/web-frontend_primary3-2.png"></p><p><img src="/img/post/web-frontend_primary3-3.png"></p><p>在自己的计算机上访问Loacl：<code>http://localhost:8080/</code>, 在局域网中可以访问Network:<code>http://192.168.0.113:8080/</code>，即可预览到框架预置的页面。如下:<br><img src="/img/post/web-frontend_primary3-4.png"></p><h3 id="Vue项目结构"><a href="#Vue项目结构" class="headerlink" title="Vue项目结构"></a>Vue项目结构</h3><p>进入项目目录，你会看到已经预置了很多目录文件，这是<code>Vue</code>官方提供的最初始的模板项目。</p><p><img src="/img/post/web-frontend_primary3-5.png"></p><h4 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h4><p><code>/public</code>目录下存放着一个图标文件和一个<code>html</code>文件<code>index.html</code>。图标即浏览器标签最前面的那个图标。<code>index.html</code>则是整个<code>vue</code>项目的出口。这是一个Web App，浏览器打开的是<code>html</code>脚本，<code>vue</code>框架需要将自己挂载在<code>html</code>的某个节点上，使得浏览器能够渲染出框架组件。<br><img src="/img/post/web-frontend_primary3-6.png"></p><p><code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>就是挂载点，如何挂载上文的后文解释。</p><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p><code>/src.main.js``Vue</code>是<code>Vue</code>框架的总入口，<code>Vue</code>框架从这里开始运行整个App。<br><img src="/img/post/web-frontend_primary3-7.png"><br>在<code>main.js</code>中，<code>new</code>了一个<code>Vue</code>实例，将<code>./App.vue</code>组件编译并挂载在<code>id=&quot;app&quot;</code>的节点上，这个节点就是<code>/public/index.html</code>中的<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>。</p><p>至于<code>App.vue</code>文件，这是一个<code>.vue</code>结尾的文件，是<code>Vue</code>框架自定义的组件。可以将他理解为z整个Web App的主页面组件，这个组件中又会引用其他组件来构成页面。初始化项目中引用了<code>/src/componets/HelloWorld.vue</code>这个组件。</p><p>你可以将一个页面的拆分成多个组件来开发，每一个组件只负责一个功能区域。这就是模块化的开发页面。</p><h4 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h4><p>在<code>src/assets</code>存放的是静态资源。在网页开发中我们需要用到很多图片、css样式文件等静态文件，一般会将他们统一放在一个目录中。当你的静态资源很多时，还可以在<code>src/assets</code>下细分<code>img</code>、<code>styles</code>这样目录来分别存放不同类型的文件。文件夹名都是自己定的，这里只提供例子，鼓励大家规范管理文件。</p><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><p>之前提到过，<code>vue-cli</code>是基于<code>webpack</code>的工具，但是在<code>vue-cli3.x</code>中默认情况下将<code>webpack</code>的配置选项隐藏起来了，当你使用默认配置时无需做出更改。</p><p>当需要个性化的配置<code>webpack</code>选项时，需要手动在根目录下创建<code>vue.config.js</code>文件(与<code>/src</code>同级)，并以以下方式写入配置：</p><pre><code class="hljs JavaScript"><span class="hljs-comment">// vue.config.js</span><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">// 选项...</span>&#125;</code></pre><p>具体配置选项参考<a href="https://cli.vuejs.org/zh/">vue-cli的官方文档</a>.</p><blockquote><p>注意：<code>vue.config.js</code>的配置选项部分与<code>webpack</code>不同。</p></blockquote><h4 id="其他文件"><a href="#其他文件" class="headerlink" title="其他文件"></a>其他文件</h4><p><code>babel.config.js</code> 是 <code>babel</code>的配置文件，它是一个<code>JavaScript</code>编译工具，使<code>js</code>的新特性能够向下兼容旧的浏览器。</p><p><code>.gitignore</code> 里配置让<code>git</code>忽略的文件或文件夹。</p><p><code>README.md</code> 使<code>markdown</code>格式的项目说明文档，上传到<code>github</code>后会展示在项目首页下方。</p><h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><p><code>.vue</code>文件是<code>Vue</code>的单文件组件，它的具体用法还是参考<a href="https://cn.vuejs.org/index.html">Vue的官方文档</a>，下面简单介绍<code>Vue</code>组件。</p><p><code>Vue</code>组件有点类似前后端分离前使用的模板引擎，它规定了模板的方式、引用变量的方式等，只需要按照模板的方式去编写就可以方便的渲染数据。下面是一个简单的例子：</p><pre><code class="hljs vue">&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;HelloWorld&#39;,  props:[],  data()&#123;    return &#123;      msg: &#39;Hello Vue.js&#39;    &#125;  &#125;，  methods: &#123;    &#x2F;&#x2F;methods  &#125;,  mounted() &#123;    &#x2F;&#x2F;生命周期钩子  &#125;&#125;&lt;&#x2F;script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;p &#123;  color: red;&#125;&lt;&#x2F;style&gt;</code></pre><h4 id="template"><a href="#template" class="headerlink" title="template"></a>template</h4><p><code>&lt;template&gt;&lt;/template&gt;</code>标签内的是组件的模板，类似<code>html</code>, 可以使用<code>Vue</code>组件自定义的标签。</p><p>在模板内使用mustache语法<code>&#123;&#123;&#125;&#125;</code>引用变量。</p><p>模板还提供<code>v-if</code>、<code>v-for</code>等语句方便渲染。</p><h4 id="script"><a href="#script" class="headerlink" title="script"></a>script</h4><p><code>export default</code>是<code>js</code>导出模块的语法。可以看出，<code>Vue</code>组件导出一个对象，对象里描述了组件的各种信息。</p><p><code>props</code>是组件定义的属性，用于父组件向字组件传值。</p><p><code>data</code>是一个函数，返回的是自己的维护的变量。</p><p><code>methods</code>是一个对象，里面可以定义这个组件要用到的<code>function</code></p><p><code>mounted</code>是一个生命周期钩子函数。一个组件从创建到被销毁的过程被定义了许多状态，到达每一个状态时都有相应的生命周期钩子函数，在函数里定义你要触发的事件。</p><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p><code>&lt;style&gt;</code>标签里写的css等样式，加上<code>scoped</code>表示标签里的样式定义域时该组件内。</p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>在这里先介绍一个概念：SPA(Single Page App)，即单页应用。在传统的网页中，点击一个链接或一个导航往往需要跳转到另一个页面，用户体验很不好。在SPA中，点击一个链接允许只刷新部分页面，始终在一个页面上更新内容，用起来更像是一个应用，拥有更好的用户体验。</p><p><code>vue-router</code>就是<code>Vue</code>官方提供的用来实现SPA的路由工具，它可以用<code>&lt;router-view /&gt;</code>这样的标签定义页面刷新的区域，每一个路由对应的是一个<code>.vue</code>组件，这样就可以在改变<code>url</code>路径时切换某个区域的组件，达到切换页面而又不必跳转页面的效果。</p><p>例如<code>Vue.js</code>官方文档采用的侧边导航＋顶部标题的经典布局：<br><img src="/img/post/web-frontend_primary3-9.png"><br>点击左边的侧边栏导航，主体部分应该更新到对应的内容，而侧边栏和顶部始终固定不变。这就可以用上面说的思路来做：主题部分用<code>&lt;router-view /&gt;</code>做嵌套路由，点击侧边栏导航至对应的子路由从而更换主体部分的组件。</p><p><code>vue-router</code>的更多功能和具体使用参考<a href="https://router.vuejs.org/zh/guide/#html">vue-router</a>的官方文档。</p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p>在开发<code>.vue</code>组件时，每个组件都拥有自己的变量，并且只能在组件内使用，组件间如果需要传递变量就要使用<code>props</code>属性（父组件向子组件传值），或者子组件<code>$emit</code>一个事件并通过事件向父组件传参。当开发的项目比较简单时，使用这种方式传值还可以接受，但如果项目很复杂，有很多组件需要共享变量时，组件间传值将是一个噩梦。</p><p><code>Vuex</code>是<code>Vue</code>官方提供的一个<code>store</code>插件，用于维护公共变量。它规定了一定的机制来定义、取用、变更公用变量，保证了公共变量的变更<code>Vue</code>框架可知、有记录，使用公共变量的同时也能高效的自动渲染页面。</p><p><code>Vuex</code>一共有四个对象，分别是：<code>state</code>、<code>getter</code>、<code>mutation</code>、和<code>action</code>。<code>state</code>用于保存定义的公共变量，<code>getter</code>一般用于定义取用<code>state</code>的函数，类似与<code>.vue</code>组件的<code>computed</code>属性。<code>mutation</code>定义<code>state</code>的变更，<code>state</code>的所有变更都要通过调用<code>mutation</code>进行，<code>mutation</code>一般不包含业务逻辑，只负责变更数据，且不允许包含异步代码。<code>action</code>中一般会包含一些业务逻辑，可以包含异步逻辑，一般在业务逻辑完成后调用相应的<code>mutation</code>来更新变量。</p><p><code>vue</code>的更多功能和具体使用参考<a href="https://vuex.vuejs.org/zh/">vuex</a>的官方文档。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>基础教程</tag>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发-前端基础2-node.js</title>
    <link href="/posts/post_web-frontend_primary2/"/>
    <url>/posts/post_web-frontend_primary2/</url>
    
    <content type="html"><![CDATA[<h2 id="node-js-生态"><a href="#node-js-生态" class="headerlink" title="node.js 生态"></a>node.js 生态</h2><p>在<code>node.js</code>生态中开发网页更像是开发一个完整的应用，它允许你将js脚本模块化，不再以<code>url</code>的形式引入脚本，而是用导入模块的方式引入代码。基于插件工具，如<code>webpack</code>，能够静态资源（<code>html</code>、<code>css</code>、图片等）全都按照模块的方式导入组织，使得前端开发更规范化，前端的第三方模块也因此丰富起来。</p><p><code>node.js</code>的下载安装可以百度找到。</p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>要使用丰富的第三方模块，首先要学会使用<code>node.js</code>的包管理工具<code>npm</code>，它就像是<code>node.js</code>的软件商店，开发者可以按照它的规范将模块上传注册到<code>npm</code>的仓库当中，其他开发者只需要知道模块的名称和版本号就能够通过<code>npm</code>下载对应的模块到开发环境中。</p><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><p>使用<code>npm</code>安装模块时默认是从国外的远程仓库获取资源，国内的访问速度在没有科学上网时很慢，这时候就需要使用国内的镜像。</p><p>使用阿里的淘宝镜像, 就是用<code>npm</code>全局安装一个叫<code>cnpm</code>的模块，这个模块的安装源可以指定，这里指定为阿里的源。</p><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p>之后再安装模块就使用<code>cnpm</code>, 其功能与<code>npm</code>完全一致，只是源不同。下文为了方便，仍使用<code>npm</code>进行说明。</p><h4 id="install-amp-uninstall"><a href="#install-amp-uninstall" class="headerlink" title="install &amp; uninstall"></a>install &amp; uninstall</h4><p><code>npm</code>有三种安装选项，分别是：全局安装、运行时依赖、开发时依赖。</p><p>全局安装是将模块下载到<code>node.js</code>的安装目录下的<code>node_modules</code>文件夹，一次安装后，本地的所有项目都可以导入它。</p><pre><code class="hljs bash"><span class="hljs-comment">#全局安装</span>npm install [package-name] -g</code></pre><p>运行时依赖包在开发环境和生产环境中都需要，它们是Web App在运行时需要用的模块，在打包生产环境资源时会被包括。</p><pre><code class="hljs bash"><span class="hljs-comment">#运行时依赖</span>npm install [package-name] --save</code></pre><p>开发时依赖仅在开发环境中需要，是一些辅助开发的插件，比如格式化工具<code>eslint</code>等。它们仅在开发环境中需要，并辅助生成生产环境资源，但最终生成的资源中并不包括它们。</p><pre><code class="hljs bash"><span class="hljs-comment">#开发时依赖</span>npm install [package-name] --save-dev</code></pre><p>运行时依赖和开发时依赖都安装在当前目录下的<code>node_modules</code>文件夹。</p><p>卸载命令用法与安装命令一致，将<code>install</code>改为<code>uninstall</code>即可。</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><pre><code class="hljs bash"><span class="hljs-comment">#初始化一个nodejs项目</span>npm init</code></pre><p>上述命令会在当前目录下初始化一个node.js项目，即创建一个<code>package.json</code>文件，用于对项目进行记录，如下图所示：</p><p><img src="/img/post/web-frontend_primary2-1.png"></p><p>这是一个<code>json</code>格式的文件，用<code>key:value</code>的方式描述项目的信息。开头一般是项目名、版本等基本信息。需要关注的是<code>&quot;script&quot;</code>、<code>&quot;dependencies&quot;</code> 和 <code>&quot;devDependencies&quot;</code>这三个<code>key</code>的内容。</p><p><code>script</code>中定义了一些脚本，可以将常用的命令、参数重新定义成要给脚本命令，更方便快捷的调用脚本。比如，用 <code>npm run dev</code> 就可以调用 <code>webpack-dev-server --inline --progress --config build/webpack.dev.conf.js</code>，这是启动开发调试服务器用的命令。使用<code>start</code>时可以直接<code>npm start</code>, 不需要加<code>run</code>.</p><p><code>npm</code>的安装区分全局安装、运行时依赖、开发时依赖，运行依赖和开发时依赖信息会记录在<code>package.json</code>中，分别对应<code>&quot;dependencies&quot;</code>和 <code>&quot;devDependencies&quot;</code>。其中记录了依赖名称和版本信息。</p><p>多人开发一个项目时，只需要同步<code>package.json</code>里的信息就可以保证所有人使用的依赖版本一致，而不是将体积庞大的<code>node_modules</code>放到远程仓库中。在项目根目录下使用<code>npm install</code>就会根据<code>package.json</code>里的依赖信息自动安装第三方模块。</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p><img src="/img/post/web-frontend_primary2-2.png"></p><p><code>webpack</code>是一个前端资源整合工具，为静态资源提供优雅的加载和打包方式。当我们使用的模块很多时，部署到生产环境中将是一件非常头疼的事情，很容易发生路径错误等问题。<code>webpack</code>会将前端项目代码统一打包成一个或几个<code>.js</code>文件，图片、字体等静态资源文件也会统一打包，在生产环境中只需要在<code>index.html</code>中引用那些<code>js</code>文件就可以访问到整个Web App，项目中复杂的引用关系全都由<code>webpack</code>自动处理，并写在<code>js</code>文件中。</p><p>配合一些插件，<code>webpack</code>还能够提供热更新的功能，开发者改动代码后不需要刷新页面就能够自动更新内容。</p><p>随着越来越多插件模块基于<code>webpack</code>开发，<code>webpack</code>的配置也变得很多。一般来说使用什么插件再对应查找该插件的配置方式即可。常用的前端框架，如<code>vue</code>、<code>react</code>推出了自己的脚手架工具，其实是基于<code>webpack</code>并将常用的插件配置好的工具，使用这些脚手架时，一般不需要手动配置就可以获得一个满足大部分情况的开发环境。</p><p><code>webpack</code>往往被封装成更简单易用的脚手架工具，不需要专门学习它也能够使用到它的功能。在遇到问题的时候，利用搜索引擎对应搜索学习即可。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>基础教程</tag>
      
      <tag>node.js</tag>
      
      <tag>npm</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发-前端基础1-html, css, js</title>
    <link href="/posts/post_web-frontend_primary1/"/>
    <url>/posts/post_web-frontend_primary1/</url>
    
    <content type="html"><![CDATA[<h2 id="前端基础1-html-css-js"><a href="#前端基础1-html-css-js" class="headerlink" title="前端基础1-html,css,js"></a>前端基础1-html,css,js</h2><p>web前端开发，也叫网页开发的基础就是 <code>html</code>, <code>css</code> 和 <code>JavaScript</code>，这三个语言编写的脚本分别负责网页的骨架（内容）、样式和动态逻辑。这三个语言各有职责但也紧密相连，样式的编写时基于内容的，动态逻辑的编写也是基于内容与样式的，入门时应该以具体实例一起操练。</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第一个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>以上就是<code>html</code>脚本的一个简单例子，可以看出它是由一系列闭合的标签组成的，每一种标签都有特定的功能，且有一定的父级关系。严格来说<code>html</code>称不上一种变成语言，它只是一个用于标记内容结构的脚本。写<code>html</code>本质上与写word文档是一致的，只不过word文档直接将排版的结果显示出来，排版的方式只需要我们用鼠标选择对应的格式；而<code>html</code>是用一个一个可嵌套的标签来规定排版的格式。如<code>&lt;p&gt;&lt;/p&gt;</code>表示的就是一个段落，在开始标签<code>&lt;p&gt;</code>与结束标签<code>&lt;/p&gt;</code>间就可以填入段落的内容。</p><p>刚开始使用时可能不记得有哪些标签，这不需要死记硬背，而应该在使用的过程中去掌握。这里推荐<a href="https://www.runoob.com/html/html-tutorial.html">HTML菜鸟教程</a>。</p><p>可以先简单的过一遍教程文档，跟着教程在网页上写一些东西，这个过程只是让你了解<code>html</code>一共有哪些东西，大致该如何使用。日后在实战过程中遇到问题再查找对应的教程。</p><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;    <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#d0e4fe</span>;&#125;<span class="hljs-selector-tag">h1</span>&#123;    <span class="hljs-attribute">color</span>:orange;    <span class="hljs-attribute">text-align</span>:center;&#125;<span class="hljs-selector-tag">p</span>&#123;    <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;Times New Roman&quot;</span>;    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">20px</span>;&#125;</code></pre><p><code>css</code>和<code>html</code>类似，也是一种标记脚本，它时配合<code>html</code>使用的。<code>html</code>完成的时网页内容（我习惯称为骨架）的编写，利用<code>css</code>可以实现更丰富的排版布局样式，包括颜色、边框、边距、宽度、高度等都是由<code>css</code>控制。不添加<code>css</code>的<code>html</code>只能展示很简单的排版，因此两个脚本一般都是一起使用的。</p><p><code>css</code>的教程也推荐<a href="https://www.runoob.com/css/css-tutorial.html">菜鸟教程</a>。学习方法与<code>html</code>一致，切勿空学不练。</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>与<code>html</code>、<code>css</code>不同，<code>JavaScript</code>是一门实实在在的编程语言，它与<code>python</code>类似，是一种弱类型动态语言。</p><p><code>JavaScript</code>创立之初是就是为网页服务的，所以它运行的环境就是浏览器。如今基于<code>JavaScript</code>拓展的<code>node.js</code>是将Google为浏览器编写的<code>JavaScript</code>重新封装，使得<code>js</code>可以运行与浏览器之外，也增加了更多的功能。<code>js</code>应用最多的仍然是在浏览器环境中。</p><p>JavaScript的教程推荐<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰的官方网站</a>。 在写原生<code>JavaScript</code>的过程中会接触大量的浏览器对象、浏览器事件，这对了深入理解网页开发很有帮助。虽然后期在使用框架开发时不会直接接触到这么多原生的浏览器、事件，但强烈建议学习这部分的内容。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>web前端开发对新手很友好的一点就是所见即所得，即你可以在浏览器上实时预览所编写代码的效果。而调试前端代码最好的工具也是浏览器，这里推荐使用Google Chrome. </p><p><img src="/img/post/web-frontend_primary1-1.png"></p><p>在浏览器页面按<code>F12</code>就可以调出当前网页的开发者调试工具窗口，如上图。在这里可以对<code>html</code>元素、<code>css</code>样式进行实时查看更改（在调试窗口更改不会更改源文件代码）。<code>Console</code>控制台相当于windows系统的小黑框<code>cmd</code>，可以在<code>Console</code>直接运行<code>js</code>代码，<code>js</code>的报错也会在这输出。</p><p>Chrome的开发者调试工具可以对<code>js</code>代码打断点，实行单步运行等，也可以查看http网络请求详情。更多的功能在使用过程中搜索发现。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -前端基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>基础教程</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>协作开发-git简介</title>
    <link href="/posts/post_git-introduction/"/>
    <url>/posts/post_git-introduction/</url>
    
    <content type="html"><![CDATA[<h2 id="协作开发"><a href="#协作开发" class="headerlink" title="协作开发"></a>协作开发</h2><h3 id="如何协作"><a href="#如何协作" class="headerlink" title="如何协作"></a>如何协作</h3><p>当很多人一起开发同一个项目时，我们需要获取别人完成的代码，也需要将自己的代码分享给别人，总的来说就是需要同步项目进度。平时我们分享文件都是用QQ、微信传文件，多个文件就打包一下再传文件。如果有文件有修改，修改过后传回给对方就在文件命名后加个<code>2.0</code>。这样的方式在简单的几次文件共享中也许还有效，而项目开发往往是很多个人长期的开发，几乎每天都需要进行项目同步，难道每个人每天都打包一次所有文件传到群里来同步吗？这并可行。所以需要版本控制工具来帮我们来解决项目同步的问题。</p><p>版本控制目前有两大阵营，分别是<code>svn</code>和<code>git</code>。</p><p><code>svn</code>是集中式的版本控制，由一个文件服务器统一管理、控制所有文件的版本，用户需要先从文件服务器中拷贝当前最新版本的文件到本地，编辑后再推送到文件服务器，文件服务器每一次更新都会产生一个新的版本号，历史的文件记录也可以通过版本号找到。用户在推送更新文件服务器前需要先<code>update</code>本地文件至与服务器一致。文件服务器可以根据版本号对文件修改进行回退。</p><p><code>git</code>是分布式版本控制，与<code>svn</code>不同的是，<code>git</code>允许每一个用户独立的进行版本控制。这意味着每一个用户都可以对自己本地的文件进行回退修改等操作。当然，在进行多人协同开发同一个项目时，仍然需要一个中心仓库，每个用户在向中心仓库推送文件前需要更新不低于本地文件至中心仓库的版本。</p><p><code>svn</code>和<code>git</code>都是在文件更新时更新版本号，根据版本号自动的完成进度的同步。由于<code>git</code>分布式的优秀特性，使得它在开源软件开发者中更受欢迎，全球最大的开源社区<code>GitHub</code>就是基于<code>git</code>建立的。</p><h3 id="git教程"><a href="#git教程" class="headerlink" title="git教程"></a>git教程</h3><p>具体的<code>git</code>教程这里不再重复，推荐<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的官方网站</a>。</p><p>建议可以跟着教程操练一遍，过后使用时遇到不清楚的地方再查询教程文档。下文提供一些常用的命令供参考。</p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p>一般的提交过程：</p><pre><code class="hljs bash"><span class="hljs-comment">#在当前目录创建并初始化一个git仓库</span>git init <span class="hljs-comment">#将工作区修改过的文件添加到暂存区`stage`</span><span class="hljs-comment">#将红色的文件名变成绿色的文件名</span>git add [filename]<span class="hljs-comment">#将暂存区的修改提交到当前分支, &quot;comment&quot;是提交记录</span><span class="hljs-comment">#将绿色文件名的文件提交至当前分支</span>git commit -m <span class="hljs-string">&quot;comment&quot;</span></code></pre><p>提交至远程仓库</p><pre><code class="hljs bash"><span class="hljs-comment">#将远程仓库origin 的 master 分支 同步到本地仓库的当前分支</span>git pull origin master<span class="hljs-comment">#将当前分支推送推送至远程仓库origin 的 master 分支</span>git push origin master</code></pre><p>操作失误时常用</p><pre><code class="hljs bash"><span class="hljs-comment">#将本地仓库回退到历史版本（谨慎使用，会使当前工作内容丢失）</span>git reset --hard<span class="hljs-comment">#将暂存区清空，即取消之前的所有 add 操作</span><span class="hljs-comment"># 绿字变回红字, 不会对当前工作内容造成更改</span>git reset HEAD<span class="hljs-comment">#撤销工作区的更新</span><span class="hljs-comment">#红字变无，会对当前工作内容造成更改</span><span class="hljs-comment">#即将某个文件的内容恢复至上一次commit后的状态</span>git checkout --filename</code></pre>]]></content>
    
    
    <categories>
      
      <category>-开发基础 -协作开发 -git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础教程</tag>
      
      <tag>git</tag>
      
      <tag>协作开发</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web开发-基础知识1</title>
    <link href="/posts/post_web-dev_primary1/"/>
    <url>/posts/post_web-dev_primary1/</url>
    
    <content type="html"><![CDATA[<h2 id="web开发基础知识"><a href="#web开发基础知识" class="headerlink" title="web开发基础知识"></a>web开发基础知识</h2><h3 id="全栈开发简介"><a href="#全栈开发简介" class="headerlink" title="全栈开发简介"></a>全栈开发简介</h3><p><img src="/img/post/web-dev_primary1-1.png"></p><p>web开发可以分为前端和后端两大部分：前端指浏览器用户交互页面，后端包括远程提供数据接口、服务接口的服务器程序以及数据库。</p><p>后端程序一般负责数据处理、业务流处理，前端一般负责将数据渲染到页面上，并响应用户操作。</p><p>整体的流程可以根据上图概括为如下：</p><ul><li>前端代码通过浏览器引擎渲染成可交互的页面</li><li>用户通过浏览器在页面上进行操作，前端代码根据用户的操作等（浏览器事件）更新页面或向后端发起请求，请求数据或发起服务。</li><li>后端服务器收到前端的请求后，触发相应的功能模块，完成相应的业务（计算、数据库增删改查等），最后向前端返回请求的结果（可能是执行的结果或数据查询的结果等）。</li></ul><blockquote><p>前端向后端发起请求、后端待命接收请求并在请求完成前返回请求结果给发起方，这都是建立在http协议上的。</p></blockquote><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写, 是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p><p>就像人们给远方的人交流一样，我们需要约定一个方式来向远方传递信息以及接受来自远方的信息，信件（邮寄）就是其中一种方式。计算机程序在交流时也需要提前约定好一种方式，http就是其中的一种方式。http基于TCP/IP协议，说应它在底层上依赖ip地址、端口等信息来定位，也需要向TCP一样三次握手确认对方身份，但在使用http协议时并不需要关心这些，因为它给我们提供了更方便的通信方式。</p><p>基于http通信的程序有两个角色，一个时客户端client，一个时服务器server。client总是作为通信的发起方，即发起一个request。server则常驻与一个已知的、固定的ip:port(地址)，它监听着某个端口的，等待client向那个端口发起请求。</p><p>client对远端server的地址是已知的，server只有接收到client的请求时才知道client的地址。client的一次请求，到server给client这次请求的响应就是一次http通信，通信结束即断开连接，并且不会保存通信的状态。</p><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><p>url即我们常说的网址，用来表示Internet地址的一种方式，这种方式人看上去比较易区分记忆，实际上它会被dns服务器解析成TCP/IP协议用的ip:port的形式。</p><p>在http中，默认使用的端口是<code>80</code>,即在浏览器中访问 <code>http://www.example.com</code> 访问的是<code>www.example.com</code>对应的ip下的80端口。如果是 <code>https</code> 则默认是443端口。</p><p>域名（网址）是需要申请注册的，它和<code>ip</code>地址一样是一种互联网资源。当我们没有注册域名时，直接使用<code>ip:port</code>的形式作为url也是可以的。</p><p>开发调试时时长会用到本地ip，<code>http://localhost:8080</code> or <code>http://127.0.0.1:8080</code> 都表示访问本地的<code>8080</code>端口。</p><h4 id="http-request"><a href="#http-request" class="headerlink" title="http request"></a>http request</h4><p><img src="/img/post/web-dev_primary1-2.png"></p><p>就像写信需要固定格式一样，因为代码在读信，http发起请求更需要一个固定的格式来表明各种信息。</p><p>如图所示，request包含三部分：</p><ul><li>请求行：method、url 以及协议版本</li><li>请求头部：以 <code>key:value</code> 形式表示的更多信息</li><li>请求数据：data发送给远端服务器的信息</li></ul><p>实际上，在开发过程中只需要按规定将请求的method、url、data等信息传入模块或函数，自能自动封装成一个http request并发起请求。</p><h4 id="http-response"><a href="#http-response" class="headerlink" title="http response"></a>http response</h4><p>和request一样，回信 response 也需要固定的格式。</p><p>主要包含 <code>header</code> 和 <code>body</code> 两部分，<code>header</code>也是<code>key:value</code>形式的各种信息，<code>body</code>则是返回的信息主体。下图是某个请求的<code>header</code></p><p><img src="/img/post/web-dev_primary1-3.png"></p><p>我们一般关心<code>header</code>中的 <code>status</code>，它是一个代码，表示本次请求的状态。<code>body</code>中内容则是我们要使用的信息。</p><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><p>对不同类型的请求，http规定了请求方法，常用的有 <code>GET</code>, <code>POST</code>, <code>DELETE</code>, <code>PUT</code>，<code>HEAD </code>，<code>OPTIONS</code>. </p><ul><li><code>GET</code>: 一般在请求一个页面，或者不带参数的请求时使用。带参数时，参数会在url中显示出来</li><li><code>POST</code>：带参请求，一般使用json格式传递参数</li><li><code>DELETE</code>: 请求服务器删除指定资源</li><li><code>PUT</code>: 请求服务器更新指定资源</li><li><code>HEAD </code>: 与<code>GET</code>类似，但只获取<code>header</code></li><li><code>OPTIONS</code>: 允许客户端查看服务器的状态（预请求），一些模块中会集成这个功能。</li></ul><h4 id="状态码status"><a href="#状态码status" class="headerlink" title="状态码status"></a>状态码<code>status</code></h4><p>http状态码用来反应请求的状态。</p><ul><li>1xx：指示信息–表示请求已接收，继续处理</li><li>2xx：成功–表示请求已被成功接收、理解、接受</li><li>3xx：重定向–要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误–请求有语法错误或请求无法实现</li><li>5xx：服务器端错误–服务器未能实现合法的请求</li></ul><p>常见的状态码和意义：</p><pre><code class="hljs JavaScript"><span class="hljs-number">200</span> OK                        <span class="hljs-comment">//客户端请求成功</span><span class="hljs-number">400</span> Bad Request               <span class="hljs-comment">//客户端请求有语法错误，不能被服务器所理解</span><span class="hljs-number">401</span> Unauthorized              <span class="hljs-comment">//请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span><span class="hljs-number">403</span> Forbidden                 <span class="hljs-comment">//服务器收到请求，但是拒绝提供服务</span><span class="hljs-number">404</span> Not Found                 <span class="hljs-comment">//请求资源不存在，eg：输入了错误的URL</span><span class="hljs-number">500</span> Internal Server <span class="hljs-built_in">Error</span>     <span class="hljs-comment">//服务器发生不可预期的错误</span><span class="hljs-number">503</span> Server Unavailable        <span class="hljs-comment">//服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span></code></pre><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>上文提到的http协议是一种单项请求，即只能由client主动向server发起请求，server不能主动向client传递信息，只能在被动的响应时回复信息。在某些场景，比如需要获取实时信息时，如果只能单项请求，client需要频繁的向服务器请求信息，这时候如果client和server可以保持通信状态，让server可以主动给client传递信息就方便许多， <code>websocket</code> 就是用来实现这一功能的。</p><p>具体用法可以百度谷歌。</p><h3 id="前端引荐"><a href="#前端引荐" class="headerlink" title="前端引荐"></a>前端引荐</h3><p>在过去，前端能做的工作很少，大概就是用 <code>html</code>写网页的主题内容，再用<code>css</code>优化一下排版，而这两个脚本语言写出来的东西都是静态，没办法动态更新，每一次请求都需要刷新整个页面。所以那时候要局部更新页面需要借助“模板引擎”，在后端语言的帮助下局部更新页面。如果时动画，就只能用现在大家都痛恶的flash。</p><p>一个大佬叫Google，重新为浏览器写了一个<code>JavaScript</code>引擎后改变了这种情况。<code>JavaScript</code>丰富的功能使得前端代码有能力方便的对页面进行动态更新。此后，<code>JavaScript</code>就成为了前端逻辑代码的担当。</p><p>所以，<code>html</code>, <code>css</code>, <code>JavaScript</code> 就成了新的网址前端开发三剑客。</p><p>之后，又有大佬不满 <code>JavaScript</code> 不能模块化，以Google开源的JavaScript引擎为基础打造了<code>node.js</code>，语法还是<code>js</code>的语法，新增了模块管理特性，并推出<code>npm</code>包管理工具，这一举措让前端开发者可能能够方便的封装复用代码，发布到<code>npm</code>后能够让其他开发者也能够方便的引入模块。</p><p>模块化有了统一的标准后，前端开发者就可以共同开发构建更多、更方便的模块。前端网页开发从原来的在一个文件里写脚本，通过url引用第三方模块的方式变成模块化开发的方式。各路大神造出了很多好用的前端框架，如：<code>React</code>、<code>Vue</code>等。</p><h3 id="后端引荐"><a href="#后端引荐" class="headerlink" title="后端引荐"></a>后端引荐</h3><p>web后端开发用很多语言都可以实现，比如老大哥<code>Java</code>,比如目前非常火爆的<code>Python</code>。无论使用哪一种语言开发都已经有成熟的web后端框架可以直接使用，<code>Java</code>用的是<code>spring-boot</code>, <code>Python</code> 这边有集成所有功能保姆级别的<code>Django</code>，也有插件丰富的轻量级的<code>flask</code>。这些框架可以帮助开发者快速构建http容器，往往只需要一行代码就可以启动一个http服务器。开发者只需要按照模块化的思路开发好各个功能模块，再按照框架配置好路由（url路径对应的功能）基本上就可以实现一个web后端服务器。</p><p>后端还有一个重要的功能就是读写数据库，常用的数据库都会有封装好的读写模块，开发者只需要调用模块就能方便的读写数据库，并获得多线程并发连接池等高级功能。这部分一般称作<code>ORM</code>（Object Relational Mapping）模块，即对象关系映射。这类模块可以将数据表结构直接映射到对象上，操作数据表就像操作一个对象一样方便。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -基础教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础教程</tag>
      
      <tag>http</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>读《月亮与六便士》</title>
    <link href="/posts/post_read_ylylbs/"/>
    <url>/posts/post_read_ylylbs/</url>
    
    <content type="html"><![CDATA[<h3 id="故事概述"><a href="#故事概述" class="headerlink" title="故事概述"></a>故事概述</h3><p>故事的主人公叫斯特里·克兰德，他原本是一位家庭美满、事业有成的证券经纪人。按照常人的思维，他已经处于人生巅峰，只需要平平稳稳的经营好现有的生活就是完美的一生了。然而他抛弃了世人都认可的、令人羡慕的生活，他独自一人、远走他乡从伦敦去到巴黎画画。</p><p>主人公去到巴黎的他没有再找一份自己擅长的证券相关的工作，而是以画画谋生。不出所料，他变得穷困潦倒，在巴黎吃尽了苦头。但所谓的“吃尽苦头”都是他人的看法，他在巴黎的朋友看到他穷困的样子接济了他，然而他却没有对朋友表现出一丁点感激之情，反而是冷眼相待。主人公变成了一个残忍冷酷的人，对世俗的一切表现得冷嘲热讽、傲慢不屑，唯独对艺术表现出一种本能的热情和无法抗拒的追求。</p><p>最终，主人公身边的人厌倦了他这个疯子，他更是厌倦了世俗社会，一个人去到南太平洋的一个岛屿上，与当地的土著结婚生子，过着与当代人类文明隔绝的生活。主人公最后在家里的四面墙壁上创作出了不朽之作，但却在得知自己身患绝症之后，叮嘱土著妻子一把火将壁画烧去，就这样一件杰作化为乌有。</p><h3 id="月亮与六便士"><a href="#月亮与六便士" class="headerlink" title="月亮与六便士"></a>月亮与六便士</h3><p>整本书并没有提到月亮与六便士，而是用主人公的经历诠释了这两件物品。皎洁的月亮高高在上，对主人公来说是他执着追求的艺术创作；而世人所奉承的功名、利益、钱财对于主人公来说只是地上的六便士，不值一提。理想在天上，遥不可及；世俗的利益在地上，触手可及，而主人公却毅然决定的选择追求天上的理想。</p><p>故事给我们描述了一个几乎极端的人物形象，为了追求自己的理想，不但抛弃功名利益还断绝了与世界的联系。这样一个极端的人在世俗社会看来是个疯子，但这是个为理想疯狂的疯子，他告诉我们如何对待追求自己的理想。</p><p>当我们尝试追求一个遥远的目标，眼前总是会有更简单易得的利益，放弃既得利益走向远方需要勇气，也必须有这样的勇气才有可能成就更大的梦想，因为这是追寻梦想的开始，就像主人公离开伦敦去到巴黎一样。</p><p>放弃利益去追求一个遥远的目标，在大多数旁人看来是愚蠢的。因此在追寻梦想的路上少不了人们的嘲笑。主人公的身边的人嘲讽他，他不但不在乎更是有一种世人愚昧的傲慢，最终选择与世隔绝。生活在现代的我们不该与世隔绝，但主人公那种无视他们嘲笑，以自己的梦想的态度是我们在实现理想的路上必不可少的。说到底，就是对目标的执着，有一份像主人公对艺术一样的执着，就能够坚持走下去，就能够不受他人影响地走下去。</p>]]></content>
    
    
    <categories>
      
      <category>-读书分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于前端跨域</title>
    <link href="/posts/post_cors_solving/"/>
    <url>/posts/post_cors_solving/</url>
    
    <content type="html"><![CDATA[<h2 id="Cross-Origin-Resource-Sharing-CORS"><a href="#Cross-Origin-Resource-Sharing-CORS" class="headerlink" title="Cross Origin Resource Sharing (CORS)"></a>Cross Origin Resource Sharing (CORS)</h2><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>跨域是浏览器的一种安全机制。为了确保页面从api获取的信息安全可信，浏览器要求前端的请求的api域名与站点在同一域名下。</p><p>例如，本网页挂载在 <code>www.a.com</code> 上，网页需要请求 <code>www.b.com</code> 上的<code>api</code>，这个过程就是跨域资源共享，即跨域。实际上，请求的资源与网页的ip相同而端口不同时也是跨域行为。</p><p>发生跨域事件时，默认情况下，浏览器会阻止该资源请求。在前后端分离的项目中，前端项目在本地运行，后端api在云服务器上，调用后端api时便会发生跨域问题。可以分别从前端和后端两个方面解决这个问题。</p><h3 id="前端解决跨域问题"><a href="#前端解决跨域问题" class="headerlink" title="前端解决跨域问题"></a>前端解决跨域问题</h3><p>在<code>node.js</code>生态中进行前端开发时，框架往往会提供一个开发环境用于实时调试。这个开发环境实际上就是一个http服务器，它的功能功能就是对用户的代码进行热更新，实时打包后部署在本地的某个端口上，用户在浏览器中访问 <code>http://localhost:8080</code> 这样的地址就能实时预览到开发的页面效果。</p><p>于是，要在前端解决跨域问题便可以从框架为我们提供的http服务器入口，只需要在框架中配置对后端<code>api</code>的代理访问，就可以保证前端页面和<code>api</code>处于同一源，即框架提供的http服务器。</p><p><img src="/img/post/%E8%B7%A8%E5%9F%9F%E4%BB%A3%E7%90%86%E8%AF%B4%E6%98%8E-1.png"></p><p>使用 <code>vue-cli 2.x</code> 时，需要在 <code>/config/index.js/</code> 中增加<code>proxyTable</code>配置</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">//...</span>  dev: &#123;    <span class="hljs-comment">//....</span>    proxyTable: &#123;      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;        target:<span class="hljs-string">&#x27;http://www.example.com&#x27;</span>, <span class="hljs-comment">//这里就是后端api的url地址</span>        changeOrigin: <span class="hljs-literal">true</span>,        withCredentials:<span class="hljs-literal">true</span>,        pathRewrite: &#123;          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>        &#125;      &#125;,    &#125;,    <span class="hljs-comment">//....</span>  &#125;&#125;</code></pre><p>使用 <code>vue-cli 3.x</code> 时, 对应的配置在根目录的 <code>vue.config.js</code> 中(没有此文件新建一个)：</p><pre><code class="hljs JavaScript"><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-comment">//...</span>  devServer: &#123;    <span class="hljs-comment">//....</span>    proxy: &#123;      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;        target:<span class="hljs-string">&#x27;http://www.example.com&#x27;</span>, <span class="hljs-comment">//这里就是后端api的url地址</span>        changeOrigin: <span class="hljs-literal">true</span>,        withCredentials:<span class="hljs-literal">true</span>,        pathRewrite: &#123;          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>        &#125;      &#125;,    &#125;,    <span class="hljs-comment">//....</span>  &#125;&#125;</code></pre><p>实际上<code>vue-cli 2.x</code>使用的是<code>webpack</code>通用的配置方式，<code>vue-cli 3.x</code>是对webpack的再封装，以<code>vue-cli</code>自己的方式进行配置，大同小异。</p><p>配置完成后需要重启调试服务器。</p><pre><code class="hljs bash"><span class="hljs-comment"># vue-cli 2.x</span>npm run dev</code></pre><p>增加此配置后，原来访问的<code>api</code>地址则从 <code>http://www.example.com/api</code> 变更为 <code>/api</code>。 框架会匹配<code>/api</code>并代替浏览器完成资源请求，再将结果通过 <code>/api</code>的请求（浏览器发起的请求）返回到页面。这个过程就是代理。更多的路径匹配方式可以查询webpack的文档。<code>pathRewrite</code>可以对路径进行个性化重写，留空表示不重写。</p><p>通过代理的方式让原本处于不同源的资源能够在站点所在源下访问到，从而解决的跨域请求的问题。</p><h3 id="nginx反向代理解决跨域"><a href="#nginx反向代理解决跨域" class="headerlink" title="nginx反向代理解决跨域"></a>nginx反向代理解决跨域</h3><p>上述方法只能在开发环境下解决跨域问题。当开发的网页中需要用到第三方不允许跨域的<code>api</code>时，在生产环境中也会面临跨域问题。此时可以利用nginx的反向代理解决，其原理与在前端调试服务器中配置请求代理一致。</p><p>后端http服务器框架都可以配置静态资源，从而使得前端开发的页面和后端开发<code>api</code>处于同一个源。而第三方的<code>api</code>无法让其处于同一个源，所以必须使用代理。可以后端的http服务器中编写代理功能，也可以使用<code>nginx</code>这样的工具来完成这一功能。</p><p><code>nginx</code>是很常用的http服务器架设工具，易于配置、功能强大。对需要代理的请求路径进行匹配即可完成代理。</p><pre><code class="hljs bash">location ^~/api/ &#123;proxy_pass http://www.example.com;            proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;            proxy_set_header Host <span class="hljs-variable">$host</span>;proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;        &#125;</code></pre><p><code>^~/api/</code>是指匹配以<code>/api/</code>开头的请求路径，更多的匹配规则自行百度。</p><p><code>proxy_pass</code> 是设置目标地址。</p><p><code>proxy_set_header</code> 的设置是对http请求的header内容进行copy。</p><blockquote><p>注意：使用nginx进行反向代理时以为着前端静态资源是用nginx挂载的，与自己写的后端<code>api</code>不是在同一端口上，所以自己写<code>api</code>接口也需要配置反向代理</p></blockquote><h3 id="后端与跨域"><a href="#后端与跨域" class="headerlink" title="后端与跨域"></a>后端与跨域</h3><p>对于自己编写的<code>api</code>，如果不希望前端在使用的时候出现跨域问题可以在http服务器框架中配置关闭这一限制。不同的框架，如<code>python</code>的<code>flask</code>、<code>Java</code>的<code>spring-boot</code>都可以轻松配置，不一一赘述。</p>]]></content>
    
    
    <categories>
      
      <category>-web开发 -前端 -常见问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
